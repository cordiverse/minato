name: Test

on:
  - push
  - pull_request

jobs:
  mysql:
    name: ${{ matrix.mysql-image }} (${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mysql-image:
          - mysql:5.7
          - mysql:8.0
          - mariadb:10.5
        node-version: [18, 20]

    services:
      mysql:
        image: ${{ matrix.mysql-image }}
        ports:
          - 3306:3306
        options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 5
        env:
          MYSQL_USER: koishi
          MYSQL_DATABASE: test
          MYSQL_PASSWORD: koishi@114514
          MYSQL_ROOT_PASSWORD: password

    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install
        run: yarn
      - name: Unit Test
        run: yarn test:json mysql
      - name: Report Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          name: codecov

  postgres:
    name: ${{ matrix.postgres-image }} (${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        postgres-image:
          - postgres:16.1
          - postgres:15.5
          - postgres:14.10
        node-version: [18, 20]

    services:
      postgres:
        image: ${{ matrix.postgres-image }}
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: koishi@114514
          POSTGRES_USER: koishi
          POSTGRES_DB: test

    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install
        run: yarn
      - name: Unit Test
        run: yarn test:json postgres
      - name: Report Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          name: codecov

  mongo:
    name: ${{ matrix.mongo-image }} (${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        mongo-image:
          - mongo:6.0
          - mongo:latest
        node-version: [18, 20]

    services:
      mongo:
        image: ${{ matrix.mongo-image }}
        ports:
          - 27017:27017
        # https://stackoverflow.com/questions/66317184/github-actions-cannot-connect-to-mongodb-service
        options: --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install
        run: yarn
      - name: Unit Test
        run: yarn test:json mongo
      - name: Report Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          name: codecov

  test:
    name: ${{ matrix.driver-name }} (${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        driver-name: [sqlite, memory]
        node-version: [18, 20]

    steps:
      - name: Check out
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install
        run: yarn
      - name: Unit Test
        run: yarn test:json ${{ matrix.driver-name }}
      - name: Report Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          name: codecov
